/**
 Canonical Signed Digit Functions
 Handles:
  * Decimals
  *
  *
 eg, +00-00+000.0 or 0.+0000-00+
 Where: '+' is +1
        '-' is -1
 Harnesser
 License: GPL2
*/
// mod lib;
// use crate::lib::{to_csd, to_csdnnz, to_decimal};
mod csd;
mod lcsre;
use crate::csd::{to_csd, to_csdnnz, to_decimal};

// extern crate structopt;

use structopt::StructOpt;

#[derive(StructOpt)]
struct Options {
    #[structopt(short = "c", long = "to_csd")]
    /// Convert a decimal, e.g. 56.3, to CSD string up to p places.
    decimal: Option<f64>,

    #[structopt(short = "p", long = "places", default_value = "4")]
    /// How many places
    places: i32,

    #[structopt(short = "d", long = "to_decimal")]
    /// Convert a number in CSD format, e.g. "+0-0.0-+", to a decimal
    csd: Option<String>,

    #[structopt(short = "f", long = "to_csdnnz")]
    /// Convert a decimal, e.g. 56.3, to CSD string up to z non-zeros
    decimal2: Option<f64>,

    #[structopt(short = "z", long = "nnz", default_value = "4")]
    /// Number of non-zeros
    nnz: u32,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let options = Options::from_args();
    // let message = std::env::args().nth(1)
    //     .expect("Missing the message. Usage: catsay < message>");

    match &options.csd {
        Some(number) => {
            println!("The ans is {}", to_decimal(number));
        }
        None => {
            // ... print the cat as before
            // println!("Please input a number");
        }
    }

    match &options.decimal {
        Some(number) => {
            println!("The ans is {}", to_csd(*number, options.places));
        }
        None => {
            // ... print the cat as before
            // println!("Please input a number");
        }
    }

    match &options.decimal2 {
        Some(number) => {
            println!("The ans is {}", to_csdnnz(*number, options.nnz));
        }
        None => {
            // ... print the cat as before
            // println!("Please input a number");
        }
    }
    Ok(())
}
